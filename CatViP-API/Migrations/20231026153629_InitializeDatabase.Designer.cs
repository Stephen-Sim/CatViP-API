// <auto-generated />
using System;
using CatViP_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatViP_API.Migrations
{
    [DbContext(typeof(CatViPContext))]
    [Migration("20231026153629_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatViP_API.Models.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("CatViP_API.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CatViP_API.Models.CartProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatCaseReportTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CatCaseReportTypeId");

                    b.HasIndex("CatId");

                    b.HasIndex("UserId");

                    b.ToTable("CatCaseReports");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatCaseReportId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsBloodyContent")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_CatCaseImages");

                    b.HasIndex("CatCaseReportId");

                    b.ToTable("CatCaseReportImages");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatCaseReportTypes");
                });

            modelBuilder.Entity("CatViP_API.Models.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserReceiveId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSendId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserReceiveId");

                    b.HasIndex("UserSendId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("CatViP_API.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DateTimie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Documentation")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpertApplications");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplicationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_ExpertApplicationStatusTypes");

                    b.ToTable("ExpertApplicationStatuses");
                });

            modelBuilder.Entity("CatViP_API.Models.MentionedCat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("PostId");

                    b.ToTable("MentionedCats");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CatViP_API.Models.PostImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsBloodyContent")
                        .HasColumnType("bit");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PostReports");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReportStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_PostReportStatusTypes");

                    b.ToTable("PostReportStatuses");
                });

            modelBuilder.Entity("CatViP_API.Models.PostType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostTypes");
                });

            modelBuilder.Entity("CatViP_API.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("CatViP_API.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CatViP_API.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CatViP_API.Models.TransactionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_TransactionStatusTypes");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("CatViP_API.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RememberToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CatViP_API.Models.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.UserFollower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("CatViP_API.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CatViP_API.Models.Cart", b =>
                {
                    b.HasOne("CatViP_API.Models.Transaction", "Transaction")
                        .WithMany("Carts")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Carts_Transactions");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Carts_Users");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.CartProduct", b =>
                {
                    b.HasOne("CatViP_API.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProducts_Carts");

                    b.HasOne("CatViP_API.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProducts_Products");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Cats")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cats_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.HasOne("CatViP_API.Models.CatCaseReportType", "CatCaseReportType")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("CatCaseReportTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseReports_CatCaseReportTypes");

                    b.HasOne("CatViP_API.Models.Cat", "Cat")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_CatCaseReports_Cats");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseReports_Users");

                    b.Navigation("Cat");

                    b.Navigation("CatCaseReportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportImage", b =>
                {
                    b.HasOne("CatViP_API.Models.CatCaseReport", "CatCaseReport")
                        .WithMany("CatCaseReportImages")
                        .HasForeignKey("CatCaseReportId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseImages_CatCaseReports");

                    b.Navigation("CatCaseReport");
                });

            modelBuilder.Entity("CatViP_API.Models.Chat", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "UserReceive")
                        .WithMany("ChatUserReceives")
                        .HasForeignKey("UserReceiveId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users1");

                    b.HasOne("CatViP_API.Models.User", "UserSend")
                        .WithMany("ChatUserSends")
                        .HasForeignKey("UserSendId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users");

                    b.Navigation("UserReceive");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("CatViP_API.Models.Comment", b =>
                {
                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Posts");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplication", b =>
                {
                    b.HasOne("CatViP_API.Models.ExpertApplicationStatus", "Status")
                        .WithMany("ExpertApplications")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpertApplications_ExpertApplicationStatusTypes");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("ExpertApplications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpertApplications_Users");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.MentionedCat", b =>
                {
                    b.HasOne("CatViP_API.Models.Cat", "Cat")
                        .WithMany("MentionedCats")
                        .HasForeignKey("CatId")
                        .IsRequired()
                        .HasConstraintName("FK_MentionedCats_Cats");

                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("MentionedCats")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_MentionedCats_Posts");

                    b.Navigation("Cat");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.HasOne("CatViP_API.Models.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_PostTypes");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Users");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.PostImage", b =>
                {
                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostImages_Posts");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReport", b =>
                {
                    b.HasOne("CatViP_API.Models.PostReportStatus", "Status")
                        .WithMany("PostReports")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PostReports_PostReportStatusTypes");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CatViP_API.Models.Product", b =>
                {
                    b.HasOne("CatViP_API.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.HasOne("CatViP_API.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Users");

                    b.Navigation("ProductType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductImage", b =>
                {
                    b.HasOne("CatViP_API.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImages_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CatViP_API.Models.Transaction", b =>
                {
                    b.HasOne("CatViP_API.Models.TransactionStatus", "Status")
                        .WithMany("Transactions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_TransactionStatusTypes");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CatViP_API.Models.UserAction", b =>
                {
                    b.HasOne("CatViP_API.Models.ActionType", "ActionType")
                        .WithMany("UserActions")
                        .HasForeignKey("ActionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_ActionTypes");

                    b.HasOne("CatViP_API.Models.PostType", "Post")
                        .WithMany("UserActions")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_PostTypes");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_Users");

                    b.Navigation("ActionType");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.UserFollower", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "Follower")
                        .WithMany("UserFollowerFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollowers_Users1");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("UserFollowerUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollowers_Users");

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.UserRole", b =>
                {
                    b.HasOne("CatViP_API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.ActionType", b =>
                {
                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.Navigation("CatCaseReports");

                    b.Navigation("MentionedCats");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.Navigation("CatCaseReportImages");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportType", b =>
                {
                    b.Navigation("CatCaseReports");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplicationStatus", b =>
                {
                    b.Navigation("ExpertApplications");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MentionedCats");

                    b.Navigation("PostImages");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReportStatus", b =>
                {
                    b.Navigation("PostReports");
                });

            modelBuilder.Entity("CatViP_API.Models.PostType", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CatViP_API.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CatViP_API.Models.Transaction", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("CatViP_API.Models.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CatViP_API.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CatCaseReports");

                    b.Navigation("Cats");

                    b.Navigation("ChatUserReceives");

                    b.Navigation("ChatUserSends");

                    b.Navigation("Comments");

                    b.Navigation("ExpertApplications");

                    b.Navigation("Posts");

                    b.Navigation("Products");

                    b.Navigation("UserActions");

                    b.Navigation("UserFollowerFollowers");

                    b.Navigation("UserFollowerUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
