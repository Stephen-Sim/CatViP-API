// <auto-generated />
using System;
using CatViP_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatViP_API.Migrations
{
    [DbContext(typeof(CatViPContext))]
    partial class CatViPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatViP_API.Models.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Like"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "DisLike"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CatCaseReportStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CatCaseReportStatusId");

                    b.HasIndex("CatId");

                    b.HasIndex("UserId");

                    b.ToTable("CatCaseReports");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatCaseReportId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsBloodyContent")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_CatCaseImages");

                    b.HasIndex("CatCaseReportId");

                    b.ToTable("CatCaseReportImages");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatCaseReportStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Settled"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Revoked"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserReceiveId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSendId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserReceiveId");

                    b.HasIndex("UserSendId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("CatViP_API.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Documentation")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpertApplications");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplicationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_ExpertApplicationStatusTypes");

                    b.ToTable("ExpertApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Success"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Revoked"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.MentionedCat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("PostId");

                    b.ToTable("MentionedCats");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CatViP_API.Models.PostImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsBloodyContent")
                        .HasColumnType("bit");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReports");
                });

            modelBuilder.Entity("CatViP_API.Models.PostType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Daily sharing"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Expert tip"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Collar"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Health care"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Toy"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Litter and tray"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Bowl"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "System Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Cat Owner"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Cat Expert"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Cat Product Seller"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RememberToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@catvip.my",
                            FullName = "CatViP Admin",
                            Gender = true,
                            Password = "$2a$11$k/X0C7n3cDkBse0MI.Ik7.o0gwjDE1eTBF6sxrCMehqppJ/21p9by",
                            RoleId = 1L,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "UTeM, Jalan Hang Tuah Jaya, 76100 Durian Tunggal, Melaka",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simshansiong2002@gmail.com",
                            FullName = "stephen sim",
                            Gender = true,
                            Latitude = 2.3164m,
                            Longitude = 102.3208m,
                            Password = "$2a$11$I7KwQml2me1TbbVzl/Ae5OxlgYwB/C1q3/zi31rcEO5KrzCJzBPu2",
                            RoleId = 2L,
                            Username = "stephen"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "UTeM, Jalan Hang Tuah Jaya, 76100 Durian Tunggal, Melaka",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tong@catvip.my",
                            FullName = "yung huey",
                            Gender = false,
                            Latitude = 2.3164m,
                            Longitude = 102.3208m,
                            Password = "$2a$11$3ao2o4O1LV9pMyCeEYA/l.JcieUQ4j3D0Zp2p6489S6YdDAuBuLFm",
                            RoleId = 3L,
                            Username = "tong"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "wafir@catvip.my",
                            FullName = "wafir the best",
                            Gender = true,
                            Password = "$2a$11$jcZk6etUlprV67YMIVd/X.2tgn4XjjKWLHj78nFb0na.UMx5Fo1NK",
                            RoleId = 4L,
                            Username = "wafir"
                        });
                });

            modelBuilder.Entity("CatViP_API.Models.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.UserFollower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Cats")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cats_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.HasOne("CatViP_API.Models.CatCaseReportStatus", "CatCaseReportStatus")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("CatCaseReportStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseReports_CatCaseReportStatuses");

                    b.HasOne("CatViP_API.Models.Cat", "Cat")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_CatCaseReports_Cats");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("CatCaseReports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseReports_Users");

                    b.Navigation("Cat");

                    b.Navigation("CatCaseReportStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportImage", b =>
                {
                    b.HasOne("CatViP_API.Models.CatCaseReport", "CatCaseReport")
                        .WithMany("CatCaseReportImages")
                        .HasForeignKey("CatCaseReportId")
                        .IsRequired()
                        .HasConstraintName("FK_CatCaseImages_CatCaseReports");

                    b.Navigation("CatCaseReport");
                });

            modelBuilder.Entity("CatViP_API.Models.Chat", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "UserReceive")
                        .WithMany("ChatUserReceives")
                        .HasForeignKey("UserReceiveId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users1");

                    b.HasOne("CatViP_API.Models.User", "UserSend")
                        .WithMany("ChatUserSends")
                        .HasForeignKey("UserSendId")
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Users");

                    b.Navigation("UserReceive");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("CatViP_API.Models.Comment", b =>
                {
                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Posts");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplication", b =>
                {
                    b.HasOne("CatViP_API.Models.ExpertApplicationStatus", "Status")
                        .WithMany("ExpertApplications")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpertApplications_ExpertApplicationStatusTypes");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("ExpertApplications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpertApplications_Users");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.MentionedCat", b =>
                {
                    b.HasOne("CatViP_API.Models.Cat", "Cat")
                        .WithMany("MentionedCats")
                        .HasForeignKey("CatId")
                        .IsRequired()
                        .HasConstraintName("FK_MentionedCats_Cats");

                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("MentionedCats")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_MentionedCats_Posts");

                    b.Navigation("Cat");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.HasOne("CatViP_API.Models.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_PostTypes");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Users");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.PostImage", b =>
                {
                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostImages_Posts");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CatViP_API.Models.PostReport", b =>
                {
                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("PostReports")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostReports_Posts");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("PostReports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PostReports_Users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.Product", b =>
                {
                    b.HasOne("CatViP_API.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.HasOne("CatViP_API.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Users");

                    b.Navigation("ProductType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CatViP_API.Models.User", b =>
                {
                    b.HasOne("CatViP_API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CatViP_API.Models.UserAction", b =>
                {
                    b.HasOne("CatViP_API.Models.ActionType", "ActionType")
                        .WithMany("UserActions")
                        .HasForeignKey("ActionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_ActionTypes");

                    b.HasOne("CatViP_API.Models.Post", "Post")
                        .WithMany("UserActions")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_Post");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserActions_Users");

                    b.Navigation("ActionType");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.UserFollower", b =>
                {
                    b.HasOne("CatViP_API.Models.User", "Follower")
                        .WithMany("UserFollowerFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollowers_Users1");

                    b.HasOne("CatViP_API.Models.User", "User")
                        .WithMany("UserFollowerUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollowers_Users");

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CatViP_API.Models.ActionType", b =>
                {
                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.Cat", b =>
                {
                    b.Navigation("CatCaseReports");

                    b.Navigation("MentionedCats");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReport", b =>
                {
                    b.Navigation("CatCaseReportImages");
                });

            modelBuilder.Entity("CatViP_API.Models.CatCaseReportStatus", b =>
                {
                    b.Navigation("CatCaseReports");
                });

            modelBuilder.Entity("CatViP_API.Models.ExpertApplicationStatus", b =>
                {
                    b.Navigation("ExpertApplications");
                });

            modelBuilder.Entity("CatViP_API.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MentionedCats");

                    b.Navigation("PostImages");

                    b.Navigation("PostReports");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("CatViP_API.Models.PostType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CatViP_API.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CatViP_API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CatViP_API.Models.User", b =>
                {
                    b.Navigation("CatCaseReports");

                    b.Navigation("Cats");

                    b.Navigation("ChatUserReceives");

                    b.Navigation("ChatUserSends");

                    b.Navigation("Comments");

                    b.Navigation("ExpertApplications");

                    b.Navigation("PostReports");

                    b.Navigation("Posts");

                    b.Navigation("Products");

                    b.Navigation("UserActions");

                    b.Navigation("UserFollowerFollowers");

                    b.Navigation("UserFollowerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
